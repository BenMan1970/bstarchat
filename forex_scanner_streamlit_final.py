import streamlit as st
import pandas as pd
import numpy as np
import time
from datetime import datetime, timezone
import requests

# --- CONFIG ---
st.set_page_config(page_title="Forex Scanner", page_icon="üìà", layout="wide")

# --- CONFIG API TWELVE DATA ---
TWELVE_DATA_API_URL = "https://api.twelvedata.com/time_series"
INTERVAL = "1h"
OUTPUT_SIZE = 50  # R√©duit pour √©viter les limites API

# --- INTERFACE POUR CLE API ---
st.sidebar.header("üîë Configuration API")
API_KEY = st.sidebar.text_input("Cl√© API Twelve Data", type="password", help="Entrez votre cl√© API Twelve Data")

if not API_KEY:
    st.warning("‚ö†Ô∏è Veuillez entrer votre cl√© API Twelve Data dans la barre lat√©rale pour commencer.")
    st.info("üí° Vous pouvez obtenir une cl√© API gratuite sur https://twelvedata.com/")
    st.stop()

# --- FETCH DATA ---
def get_data(symbol, api_key):
    """R√©cup√®re les donn√©es avec diagnostic d√©taill√©"""
    try:
        params = {
            "symbol": symbol,
            "interval": INTERVAL,
            "outputsize": OUTPUT_SIZE,
            "apikey": api_key,
            "timezone": "UTC"
        }
        
        st.write(f"üîç Requ√™te pour {symbol}...")
        r = requests.get(TWELVE_DATA_API_URL, params=params, timeout=15)
        
        st.write(f"üì° Status: {r.status_code}")
        
        if r.status_code != 200:
            st.error(f"‚ùå Erreur HTTP {r.status_code} pour {symbol}")
            return None
            
        j = r.json()
        st.write(f"üìã R√©ponse API: {list(j.keys())}")
        
        # Diagnostics d√©taill√©s
        if "status" in j and j["status"] == "error":
            st.error(f"‚ùå Erreur API pour {symbol}: {j.get('message', 'Erreur inconnue')}")
            return None
            
        if "code" in j and j["code"] != 200:
            st.error(f"‚ùå Code erreur {j['code']} pour {symbol}: {j.get('message', 'Erreur inconnue')}")
            return None
            
        if "values" not in j:
            st.warning(f"‚ö†Ô∏è Pas de donn√©es 'values' pour {symbol}. Cl√©s disponibles: {list(j.keys())}")
            if "note" in j:
                st.info(f"‚ÑπÔ∏è Note API: {j['note']}")
            return None
            
        if not j["values"] or len(j["values"]) == 0:
            st.warning(f"‚ö†Ô∏è Donn√©es vides pour {symbol}")
            return None
            
        df = pd.DataFrame(j["values"])
        st.write(f"üìä Donn√©es re√ßues: {len(df)} lignes, colonnes: {list(df.columns)}")
        
        # V√©rification des colonnes essentielles
        required_cols = ['datetime', 'open', 'high', 'low', 'close']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            st.error(f"‚ùå Colonnes manquantes pour {symbol}: {missing_cols}")
            return None
        
        df['datetime'] = pd.to_datetime(df['datetime'])
        df.set_index('datetime', inplace=True)
        df = df.sort_index()
        
        # Conversion en float avec diagnostic
        for col in ['open', 'high', 'low', 'close']:
            original_type = df[col].dtype
            df[col] = pd.to_numeric(df[col], errors='coerce')
            null_count = df[col].isnull().sum()
            if null_count > 0:
                st.warning(f"‚ö†Ô∏è {null_count} valeurs nulles dans {col} pour {symbol}")
            
        df.rename(columns={"open":"Open","high":"High","low":"Low","close":"Close"}, inplace=True)
        
        # V√©rification finale
        clean_df = df[['Open','High','Low','Close']].dropna()
        st.write(f"‚úÖ Donn√©es nettoy√©es: {len(clean_df)} lignes valides")
        
        if len(clean_df) < 30:
            st.warning(f"‚ö†Ô∏è Pas assez de donn√©es pour {symbol} ({len(clean_df)} lignes)")
            return None
            
        return clean_df
        
    except requests.exceptions.Timeout:
        st.error(f"‚è±Ô∏è Timeout pour {symbol}")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"üåê Erreur r√©seau pour {symbol}: {e}")
        return None
    except Exception as e:
        st.error(f"üí• Erreur inattendue pour {symbol}: {e}")
        return None

# --- PAIRS SIMPLIFIEES POUR TEST ---
FOREX_PAIRS_TD = [
    "EUR/USD", "GBP/USD", "USD/JPY", "USD/CHF", "AUD/USD"
]

# --- INDICATEURS SIMPLIFIES ---
def calculate_simple_signals(df):
    """Version simplifi√©e des signaux pour debug"""
    if df is None or len(df) < 20:
        return None
        
    try:
        signals = {}
        bull = bear = 0
        
        # 1. Simple Moving Average
        sma_short = df['Close'].rolling(5).mean()
        sma_long = df['Close'].rolling(10).mean()
        
        if len(sma_short) >= 2 and len(sma_long) >= 2:
            if sma_short.iloc[-1] > sma_long.iloc[-1]:
                bull += 1
                signals['SMA'] = "‚ñ≤"
            else:
                bear += 1
                signals['SMA'] = "‚ñº"
        else:
            signals['SMA'] = "‚Äî"
        
        # 2. Price vs Moving Average
        sma_20 = df['Close'].rolling(20).mean()
        current_price = df['Close'].iloc[-1]
        
        if not pd.isna(sma_20.iloc[-1]):
            if current_price > sma_20.iloc[-1]:
                bull += 1
                signals['Price_vs_MA'] = "‚ñ≤"
            else:
                bear += 1
                signals['Price_vs_MA'] = "‚ñº"
        else:
            signals['Price_vs_MA'] = "‚Äî"
        
        # 3. Volume (si disponible) ou momentum simple
        if len(df) >= 3:
            momentum = df['Close'].iloc[-1] - df['Close'].iloc[-3]
            if momentum > 0:
                bull += 1
                signals['Momentum'] = "‚ñ≤"
            else:
                bear += 1
                signals['Momentum'] = "‚ñº"
        else:
            signals['Momentum'] = "‚Äî"
        
        # 4. High/Low position
        high_20 = df['High'].rolling(20).max()
        low_20 = df['Low'].rolling(20).min()
        
        if not pd.isna(high_20.iloc[-1]) and not pd.isna(low_20.iloc[-1]):
            range_20 = high_20.iloc[-1] - low_20.iloc[-1]
            position = (current_price - low_20.iloc[-1]) / range_20 if range_20 > 0 else 0.5
            
            if position > 0.7:
                bull += 1
                signals['Position'] = "‚ñ≤"
            elif position < 0.3:
                bear += 1
                signals['Position'] = "‚ñº"
            else:
                signals['Position'] = "‚Äî"
        else:
            signals['Position'] = "‚Äî"
        
        confluence = max(bull, bear)
        direction = "HAUSSIER" if bull > bear else "BAISSIER" if bear > bull else "NEUTRE"
        
        # Syst√®me d'√©toiles simplifi√©
        stars_map = {4: "‚≠ê‚≠ê‚≠ê‚≠ê", 3: "‚≠ê‚≠ê‚≠ê", 2: "‚≠ê‚≠ê", 1: "‚≠ê"}
        stars = stars_map.get(confluence, "WAIT")
        
        return {
            "confluence": confluence, 
            "direction": direction, 
            "stars": stars, 
            "signals": signals,
            "price": f"{current_price:.4f}"
        }
        
    except Exception as e:
        st.error(f"üí• Erreur calcul signaux: {e}")
        return None

# --- INTERFACE UTILISATEUR ---
st.title("üìà Forex Scanner (Mode Debug)")
st.markdown("---")

col1, col2 = st.columns([1, 3])

with col1:
    st.header("‚öôÔ∏è Param√®tres")
    min_conf = st.slider("Confluence minimale", 0, 4, 1)  # R√©duit √† 4 max
    show_all = st.checkbox("Afficher toutes les paires", value=True)  # Par d√©faut True
    debug_mode = st.checkbox("Mode debug d√©taill√©", value=True)
    
    scan_button = st.button("üöÄ Lancer le scan", type="primary")

with col2:
    if scan_button and API_KEY:
        st.header("üìä R√©sultats du scan")
        
        if debug_mode:
            st.info("üîß Mode debug activ√© - vous verrez tous les d√©tails du processus")
        
        results = []
        errors = []
        
        for i, symbol in enumerate(FOREX_PAIRS_TD):
            st.markdown(f"### üîç Analyse de {symbol} ({i+1}/{len(FOREX_PAIRS_TD)})")
            
            with st.expander(f"D√©tails pour {symbol}", expanded=debug_mode):
                df = get_data(symbol, API_KEY)
                
                if df is not None:
                    st.success(f"‚úÖ Donn√©es r√©cup√©r√©es pour {symbol}")
                    
                    res = calculate_simple_signals(df)
                    if res:
                        st.write(f"üéØ Signaux calcul√©s: {res}")
                        
                        if show_all or res['confluence'] >= min_conf:
                            color = ('green' if res['direction'] == 'HAUSSIER' 
                                   else 'red' if res['direction'] == 'BAISSIER' 
                                   else 'gray')
                            
                            row = {
                                "Paire": symbol.replace("/", ""),
                                "Prix": res['price'],
                                "Confluences": res['stars'],
                                "Direction": f"<span style='color:{color}'>{res['direction']}</span>",
                            }
                            row.update(res['signals'])
                            results.append(row)
                            st.success(f"‚úÖ {symbol} ajout√© aux r√©sultats")
                        else:
                            st.info(f"‚ÑπÔ∏è {symbol} filtr√© (confluence {res['confluence']} < {min_conf})")
                    else:
                        st.error(f"‚ùå √âchec calcul signaux pour {symbol}")
                        errors.append(f"{symbol}: √âchec calcul signaux")
                else:
                    st.error(f"‚ùå Pas de donn√©es pour {symbol}")
                    errors.append(f"{symbol}: Pas de donn√©es")
            
            # D√©lai pour √©viter de surcharger l'API
            if i < len(FOREX_PAIRS_TD) - 1:  # Pas de d√©lai apr√®s le dernier
                time.sleep(2)  # Augment√© √† 2 secondes
        
        # R√©sultats finaux
        st.markdown("---")
        st.markdown("## üìã R√©sum√© final")
        
        if results:
            st.success(f"‚úÖ {len(results)} opportunit√©s trouv√©es sur {len(FOREX_PAIRS_TD)} paires analys√©es")
            
            df_res = pd.DataFrame(results)
            df_res['sort_key'] = df_res['Confluences'].apply(lambda x: x.count('‚≠ê'))
            df_res = df_res.sort_values(by="sort_key", ascending=False).drop('sort_key', axis=1)
            
            st.markdown("### üéØ Opportunit√©s d√©tect√©es")
            st.markdown(df_res.to_html(escape=False, index=False), unsafe_allow_html=True)
            
        else:
            st.warning("‚ö†Ô∏è Aucun r√©sultat trouv√©")
            st.info("üí° V√©rifiez votre cl√© API ou r√©duisez la confluence minimale")
        
        if errors:
            st.markdown("### ‚ùå Erreurs rencontr√©es")
            for error in errors:
                st.text(f"‚Ä¢ {error}")

# Footer
st.markdown("---")
st.caption(f"üïí Derni√®re mise √† jour : {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} UTC")

# Guide de diagnostic
with st.expander("üîß Guide de diagnostic"):
    st.markdown("""
    **Si aucun r√©sultat n'appara√Æt :**
    
    1. **Cl√© API invalide** : V√©rifiez votre cl√© sur twelvedata.com
    2. **Limites API atteintes** : Attendez ou upgradez votre plan
    3. **Symboles invalides** : Certains symboles peuvent ne pas √™tre disponibles
    4. **Confluence trop √©lev√©e** : R√©duisez la confluence minimale √† 1
    5. **Donn√©es insuffisantes** : Certaines paires peuvent manquer de donn√©es historiques
    
    **En mode debug, vous devriez voir :**
    - Les requ√™tes API pour chaque paire
    - Le status code de chaque r√©ponse
    - Le nombre de lignes de donn√©es re√ßues
    - Les erreurs sp√©cifiques
    
    **API Twelve Data - Plans gratuits :**
    - 800 appels par jour
    - 8 appels par minute
    - Donn√©es diff√©r√©es
    """)

# Test rapide de l'API
if st.button("üß™ Test rapide API"):
    st.write("Test de connexion avec EUR/USD...")
    test_result = get_data("EUR/USD", API_KEY)
    if test_result is not None:
        st.success("‚úÖ API fonctionne !")
        st.write(f"Exemple de donn√©es re√ßues: {len(test_result)} lignes")
        st.write(test_result.head())
    else:
        st.error("‚ùå Probl√®me avec l'API")
